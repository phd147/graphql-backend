package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	loaders "graphql-backend/data-loader"
	"graphql-backend/graph/model"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.CreateProductInput) (*model.Product, error) {
	return r.Api.CreateProduct(ctx, input)
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input model.UpdateProductInput) (*model.Product, error) {
	return r.Api.UpdateProduct(ctx, input)
}

// PlaceOrder is the resolver for the placeOrder field.
func (r *mutationResolver) PlaceOrder(ctx context.Context, productIds []string) (*model.Order, error) {
	return r.Api.PlaceOrder(ctx, productIds)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	return r.Api.Login(ctx, input)
}

// Products is the resolver for the products field.
func (r *orderResolver) Products(ctx context.Context, obj *model.Order) ([]*model.Product, error) {
	return loaders.GetProducts(ctx, obj.ProductIDs)
}

// User is the resolver for the user field.
func (r *orderResolver) User(ctx context.Context, obj *model.Order) (*model.User, error) {
	return loaders.GetUser(ctx, obj.UserID)
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, limit *int32, offset *int32, category *string) ([]*model.Product, error) {
	return r.Api.Products(ctx, limit, offset, category)
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	return r.Api.Product(ctx, id)
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, limit *int32, offset *int32) ([]*model.Order, error) {
	return r.Api.Orders(ctx, limit, offset)
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	return r.Api.Order(ctx, id)
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	return r.Api.Me(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Order returns OrderResolver implementation.
func (r *Resolver) Order() OrderResolver { return &orderResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
